// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import ec "github.com/kyma-incubator/bullseye-showcase/backend/internal/ec"
import mock "github.com/stretchr/testify/mock"

// ProductService is an autogenerated mock type for the ProductService type
type ProductService struct {
	mock.Mock
}

// BuildProductImage provides a mock function with given fields: dto
func (_m *ProductService) BuildProductImage(dto *ec.ProductDTO) *ec.ProductDTO {
	ret := _m.Called(dto)

	var r0 *ec.ProductDTO
	if rf, ok := ret.Get(0).(func(*ec.ProductDTO) *ec.ProductDTO); ok {
		r0 = rf(dto)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec.ProductDTO)
		}
	}

	return r0
}

// GetProductDetailsByID provides a mock function with given fields: ID
func (_m *ProductService) GetProductDetailsByID(ID string) (ec.ProductDTO, error) {
	ret := _m.Called(ID)

	var r0 ec.ProductDTO
	if rf, ok := ret.Get(0).(func(string) ec.ProductDTO); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Get(0).(ec.ProductDTO)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductJSONByID provides a mock function with given fields: ID
func (_m *ProductService) GetProductJSONByID(ID string) (string, error) {
	ret := _m.Called(ID)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
