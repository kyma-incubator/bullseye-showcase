// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import ec "github.wdf.sap.corp/Magikarpie/bullseye/internal/ec"
import mock "github.com/stretchr/testify/mock"

// ProductsRepository is an autogenerated mock type for the ProductsRepository type
type ProductsRepository struct {
	mock.Mock
}

// AddProduct provides a mock function with given fields: ID, data
func (_m *ProductsRepository) AddProduct(ID string, data string) error {
	ret := _m.Called(ID, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(ID, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTable provides a mock function with given fields:
func (_m *ProductsRepository) CreateTable() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DropTable provides a mock function with given fields:
func (_m *ProductsRepository) DropTable() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exists provides a mock function with given fields:
func (_m *ProductsRepository) Exists() (bool, error) {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllProducts provides a mock function with given fields:
func (_m *ProductsRepository) GetAllProducts() ([]ec.ProductDTO, error) {
	ret := _m.Called()

	var r0 []ec.ProductDTO
	if rf, ok := ret.Get(0).(func() []ec.ProductDTO); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ec.ProductDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductByID provides a mock function with given fields: ID
func (_m *ProductsRepository) GetProductByID(ID string) (ec.ProductDTO, error) {
	ret := _m.Called(ID)

	var r0 ec.ProductDTO
	if rf, ok := ret.Get(0).(func(string) ec.ProductDTO); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Get(0).(ec.ProductDTO)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProductDataByID provides a mock function with given fields: ID, newData
func (_m *ProductsRepository) UpdateProductDataByID(ID string, newData string) error {
	ret := _m.Called(ID, newData)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(ID, newData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
